// Enhanced cosmic elements for TradeLingo
import React from 'react';

// TradeLingo logo component - can be used in the header
const TradeLingoLogo = () => {
  return (
    <svg 
      viewBox="0 0 500 120" 
      xmlns="http://www.w3.org/2000/svg"
      className="tradelingo-logo"
    >
      {/* Glow effect behind the logo */}
      <defs>
        <filter id="glow" x="-50%" y="-50%" width="200%" height="200%">
          <feGaussianBlur stdDeviation="5" result="blur" />
          <feComposite in="SourceGraphic" in2="blur" operator="over" />
<feComposite in="SourceGraphic" in2="blur" operator="over" />
        </filter>
        
        <linearGradient id="logoGradient" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" stopColor="#6ee7b7" />
          <stop offset="50%" stopColor="#14b8a6" />
          <stop offset="100%" stopColor="#0ea5e9" />
        </linearGradient>
        
        <linearGradient id="rocketGradient" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" stopColor="#6ee7b7" />
          <stop offset="100%" stopColor="#0ea5e9" />
        </linearGradient>
        
        <filter id="neonGlow">
          <feGaussianBlur stdDeviation="4" result="glow" />
          <feMerge>
            <feMergeNode in="glow" />
            <feMergeNode in="glow" />
            <feMergeNode in="SourceGraphic" />
          </feMerge>
        </filter>
      </defs>
      
      {/* Rocket as part of the logo */}
      <g transform="translate(30, 60) rotate(-30)" filter="url(#neonGlow)">
        <path 
          d="M0,0 L15,40 L0,55 L-15,40 Z" 
          fill="url(#rocketGradient)" 
        />
        <circle cx="0" cy="15" r="5" fill="white" fillOpacity="0.8" />
        <path 
          d="M-10,40 L0,60 L10,40" 
          fill="#f59e0b" 
          filter="url(#glow)"
        />
      </g>
      
      {/* Text with gradient fill */}
      <g filter="url(#neonGlow)">
        <text x="75" y="80" fontFamily="Arial" fontWeight="bold" fontSize="60" fill="url(#logoGradient)">TRADE</text>
        <text x="260" y="80" fontFamily="Arial" fontWeight="bold" fontSize="60" fill="url(#logoGradient)">LINGO</text>
      </g>
      
      {/* Futuristic decorative elements */}
      <path d="M75,90 L355,90" stroke="url(#logoGradient)" strokeWidth="2" strokeDasharray="5,5" />
      
      {/* Chart/course elements */}
      <polyline 
        points="380,60 390,50 400,65 410,45 420,55 430,40" 
        stroke="url(#logoGradient)" 
        strokeWidth="3" 
        fill="none" 
        filter="url(#neonGlow)"
      />
      
      {/* Circle/planet element */}
      <circle cx="450" cy="50" r="15" fill="none" stroke="url(#logoGradient)" strokeWidth="2" />
      <circle cx="450" cy="50" r="10" fill="url(#logoGradient)" fillOpacity="0.3" />
      <circle cx="450" cy="50" r="5" fill="url(#logoGradient)" fillOpacity="0.5" />
    </svg>
  );
};

// Function to transform levels into planets with different appearances
const transformLevelsToPlanets = () => {
  try {
    console.log('Transforming levels into planets...');
    const levelNodes = document.querySelectorAll('.level-node');
    console.log(`${levelNodes.length} level nodes found`);
    
    levelNodes.forEach((node, index) => {
      // Check if the node is already transformed
      if (node.querySelector('.planet-container')) {
        console.log('Node is already transformed, skipping');
        return;
      }
      
      // Get existing elements
      const levelIcon = node.querySelector('.level-icon');
      const levelInfo = node.querySelector('.level-info');
      
      if (!levelIcon) {
        console.log('Level icon not found in node', index);
        return; // Skip if icon doesn't exist
      }
      
      console.log('Transforming level node', index);
      
      // Get progress percentage
      const progressBar = node.querySelector('.progress-bar .progress');
      const progressStyle = progressBar ? progressBar.style.width : '0%';
      const progressPercentage = parseInt(progressStyle) || 0;
      
      // Create planet container
      const planetContainer = document.createElement('div');
      planetContainer.className = 'planet-container';
      
      // Create planet
      const planet = document.createElement('div');
      planet.className = 'planet';
      
      // Add progress indicator in the center of the planet
      const planetProgress = document.createElement('div');
      planetProgress.className = 'planet-progress';
      planetProgress.style.zIndex = '10'; // Ensure it stays on top of the planet
      
      const progressText = document.createElement('div');
      progressText.className = 'progress-text';
      progressText.style.animation = 'none'; // Prevent text from rotating
      progressText.textContent = `${progressPercentage}%`;
      
      planetProgress.appendChild(progressText);
      planet.appendChild(planetProgress);
      
      // Add random planet features (craters, mountains)
      for (let i = 0; i < 12; i++) {
        const feature = document.createElement('div');
        feature.className = 'planet-feature';
        
        // Random position within the planet
        feature.style.left = `${10 + Math.random() * 80}%`;
        feature.style.top = `${10 + Math.random() * 80}%`;
        
        // Random size
        const featureSize = 3 + Math.random() * 15;
        feature.style.width = `${featureSize}px`;
        feature.style.height = `${featureSize}px`;
        
        // Random opacity
        feature.style.opacity = 0.1 + Math.random() * 0.4;
        
        // Different colors based on planet type
        switch (index % 5) {
          case 0: // Green planet
            feature.style.backgroundColor = 'rgba(110, 231, 183, 0.4)';
            break;
          case 1: // Purple planet
            feature.style.backgroundColor = 'rgba(167, 139, 250, 0.4)';
            break;
          case 2: // Orange planet
            feature.style.backgroundColor = 'rgba(251, 146, 60, 0.4)';
            break;
          case 3: // Pink planet
            feature.style.backgroundColor = 'rgba(244, 114, 182, 0.4)';
            break;
          case 4: // Yellow planet
            feature.style.backgroundColor = 'rgba(250, 204, 21, 0.4)';
            break;
        }
        
        planet.appendChild(feature);
      }
      
      // Add glow effect
      const planetGlow = document.createElement('div');
      planetGlow.className = 'planet-glow';
      
      // Place everything together
      planetContainer.appendChild(planet);
      planetContainer.appendChild(planetGlow);
      
      // Add orbiting rocket to active level (check if this level is unlocked but not completed)
      const isUnlocked = !node.classList.contains('locked');
      const progressCompleted = progressPercentage > 0 && progressPercentage < 100;
      
      if (isUnlocked && progressCompleted) {
        console.log('Adding orbiting rocket to active level');
        const orbitingRocket = document.createElement('div');
        orbitingRocket.className = 'orbiting-rocket';
        
        const rocketBody = document.createElement('div');
        rocketBody.className = 'rocket-body';
        
        const rocketShape = document.createElement('div');
        rocketShape.className = 'rocket-shape';
        
        const rocketWindow = document.createElement('div');
        rocketWindow.className = 'rocket-window';
        
        const rocketFlame = document.createElement('div');
        rocketFlame.className = 'rocket-flame';
        
        rocketBody.appendChild(rocketShape);
        rocketBody.appendChild(rocketWindow);
        rocketBody.appendChild(rocketFlame);
        orbitingRocket.appendChild(rocketBody);
        
        planetContainer.appendChild(orbitingRocket);
      }
      
      // Replace level icon with planet
      try {
        console.log('Attempting to replace level icon...');
        node.replaceChild(planetContainer, levelIcon);
        console.log('Level icon successfully replaced with planet');
      } catch (err) {
        console.error('Error replacing level icon:', err);
      }
      
      // Adjust the layout to vertical
      node.style.flexDirection = 'column';
      node.style.alignItems = 'center';
      
      // Adjust text alignment
      if (levelInfo) {
        levelInfo.style.textAlign = 'center';
      }
    });
  } catch (err) {
    console.error('Error transforming levels into planets:', err);
  }
};

// Function to add rocket to the path between levels (enhanced version)
const addRocketToPath = () => {
  try {
    console.log('Adding rocket to path...');
    
    // Remove existing rockets to prevent duplicate elements
    document.querySelectorAll('.rocket').forEach(r => r.remove());
    
    const paths = document.querySelectorAll('.level-path');
    if (!paths || paths.length === 0) {
      console.log('No paths found to add rocket to');
      return;
    }
    
    console.log(`${paths.length} level paths found`);
    
    paths.forEach((path, index) => {
      // Check if path is active (not grayed out)
      const pathStyle = window.getComputedStyle(path);
      const isPathActive = pathStyle.opacity !== '0.4' && pathStyle.opacity > 0.5;
      
      if (!isPathActive) {
        console.log('Path is not active, skipping rocket addition');
        return;
      }
      
      console.log('Adding rocket to active path', index);
      
      // Create rocket element
      const rocket = document.createElement('div');
      rocket.className = 'rocket';
      rocket.id = `rocket-${index}`;
      
      const rocketBody = document.createElement('div');
      rocketBody.className = 'rocket-body';
      
      const rocketShape = document.createElement('div');
      rocketShape.className = 'rocket-shape';
      
      const rocketWindow = document.createElement('div');
      rocketWindow.className = 'rocket-window';
      
      const rocketFlame = document.createElement('div');
      rocketFlame.className = 'rocket-flame';
      
      rocketBody.appendChild(rocketShape);
      rocketBody.appendChild(rocketWindow);
      rocketBody.appendChild(rocketFlame);
      rocket.appendChild(rocketBody);
      
      // Add rocket to the DOM
      const worldMap = document.querySelector('.world-map');
      if (worldMap) {
        worldMap.appendChild(rocket);
        console.log('Rocket added to world-map');
        
        // Start animation
        animateRocketAlongPath(rocket, path, worldMap);
      } else {
        console.log('World-map not found');
      }
    });
  } catch (err) {
    console.error('Error adding rocket:', err);
  }
};

// Enhanced rocket animation function
const animateRocketAlongPath = (rocket, path, worldMap) => {
  try {
    if (!rocket || !path || !worldMap) {
      console.log('Missing elements for rocket animation');
      return;
    }
    
    console.log('Starting rocket animation along path');
    
    let progress = 0;
    const speed = 0.5; // percentage per frame
    
    // Calculate bounding boxes for the path and the world map
    const pathRect = path.getBoundingClientRect();
    const mapRect = worldMap.getBoundingClientRect();
    
    // Determine the start and endpoint of the path
    let pathLength = null;
    try {
      pathLength = path.getTotalLength ? path.getTotalLength() : null;
    } catch (err) {
      console.log('Could not get path length, using fallback method');
      pathLength = null;
    }
    
    // If we can use SVG path lengths
    if (pathLength) {
      console.log('Using SVG path for animation, length:', pathLength);
      
      const animate = () => {
        // Update progress
        progress += speed;
        if (progress > 100) progress = 0;
        
        try {
          // Calculate position on path
          const pointOnPath = path.getPointAtLength(pathLength * progress / 100);
          
          // Calculate a point slightly ahead on the path for rotation
          const pointAhead = path.getPointAtLength(pathLength * Math.min((progress + 1) / 100, 1));
          
          // Calculate rotation angle
          const angle = Math.atan2(pointAhead.y - pointOnPath.y, pointAhead.x - pointOnPath.x) * 180 / Math.PI;
          
          // Position relative to the world map
          const x = pointOnPath.x - mapRect.left;
          const y = pointOnPath.y - mapRect.top;
          
          // Set rocket at this position with correct rotation
          rocket.style.transform = `translate(${x}px, ${y}px) rotate(${angle + 90}deg)`;
          rocket.style.display = 'block'; // Ensure the rocket is visible
        } catch (err) {
          console.error('Error during rocket positioning:', err);
        }
        
        // Next frame
        requestAnimationFrame(animate);
      };
      
      // Start animation
      requestAnimationFrame(animate);
    } else {
      console.log('Fallback animation method (no SVG path support)');
      
      // Fallback method for browsers that don't support SVG functions
      // Start position is left of the path, end position is right
      const startX = pathRect.left - mapRect.left;
      const startY = pathRect.top - mapRect.top;
      const endX = pathRect.right - mapRect.left;
      const endY = pathRect.bottom - mapRect.top;
      
      // Midpoint for a curved path (for a simple arc)
      const midX = (startX + endX) / 2;
      const midY = startY - 50; // Higher than the line for an upward arc
      
      const animate = () => {
        // Update progress
        progress += speed;
        if (progress > 100) progress = 0;
        
        const t = progress / 100;
        
        // Calculate quadratic bezier curve point
        const x = (1 - t) * (1 - t) * startX + 2 * (1 - t) * t * midX + t * t * endX;
        const y = (1 - t) * (1 - t) * startY + 2 * (1 - t) * t * midY + t * t * endY;
        
        // Calculate a point slightly ahead on the curve for rotation
        const tAhead = Math.min(t + 0.01, 1);
        const xAhead = (1 - tAhead) * (1 - tAhead) * startX + 2 * (1 - tAhead) * tAhead * midX + tAhead * tAhead * endX;
        const yAhead = (1 - tAhead) * (1 - tAhead) * startY + 2 * (1 - tAhead) * tAhead * midY + tAhead * tAhead * endY;
        
        // Calculate rotation angle
        const angle = Math.atan2(yAhead - y, xAhead - x) * 180 / Math.PI;
        
        // Position the rocket
        rocket.style.transform = `translate(${x}px, ${y}px) rotate(${angle + 90}deg)`;
        rocket.style.display = 'block'; // Ensure the rocket is visible
        
        // Next frame
        requestAnimationFrame(animate);
      };
      
      // Start animation
      requestAnimationFrame(animate);
    }
  } catch (err) {
    console.error('Error in the rocket animation function:', err);
  }
};

// Replace the TradeLingo text with the logo in the header
const replaceTitleWithLogo = () => {
  try {
    console.log('Replacing title with logo...');
    const headerTitle = document.querySelector('header h1');
    if (!headerTitle) {
      console.log('Header title not found');
      return;
    }
    
    if (headerTitle.querySelector('.tradelingo-logo')) {
      console.log('Logo is already placed, skipping replacement');
      return;
    }
    
    console.log('Header title found, replacing with logo');
    
    // Create a container for the logo
    const logoContainer = document.createElement('div');
    logoContainer.className = 'logo-container';
    logoContainer.innerHTML = `
      <svg 
        viewBox="0 0 500 120" 
        xmlns="http://www.w3.org/2000/svg"
        class="tradelingo-logo"
      >
        <!-- Glow effect behind the logo -->
        <defs>
          <filter id="glow" x="-50%" y="-50%" width="200%" height="200%">
            <feGaussianBlur stdDeviation="5" result="blur" />
            <feComposite in="SourceGraphic" in2="blur" operator="over" />
          </filter>
          
          <linearGradient id="logoGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#6ee7b7" />
            <stop offset="50%" stopColor="#14b8a6" />
            <stop offset="100%" stopColor="#0ea5e9" />
          </linearGradient>
          
          <linearGradient id="rocketGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#6ee7b7" />
            <stop offset="100%" stopColor="#0ea5e9" />
          </linearGradient>
          
          <filter id="neonGlow">
            <feGaussianBlur stdDeviation="4" result="glow" />
            <feMerge>
              <feMergeNode in="glow" />
              <feMergeNode in="glow" />
              <feMergeNode in="SourceGraphic" />
            </feMerge>
          </filter>
        </defs>
        
        <!-- Rocket as part of the logo -->
        <g transform="translate(30, 60) rotate(-30)" filter="url(#neonGlow)">
          <path 
            d="M0,0 L15,40 L0,55 L-15,40 Z" 
            fill="url(#rocketGradient)" 
          />
          <circle cx="0" cy="15" r="5" fill="white" fillOpacity="0.8" />
          <path 
            d="M-10,40 L0,60 L10,40" 
            fill="#f59e0b" 
            filter="url(#glow)"
          />
        </g>
        
        <!-- Text with gradient fill -->
        <g filter="url(#neonGlow)">
          <text x="75" y="80" fontFamily="Arial" fontWeight="bold" fontSize="60" fill="url(#logoGradient)">TRADE</text>
          <text x="260" y="80" fontFamily="Arial" fontWeight="bold" fontSize="60" fill="url(#logoGradient)">LINGO</text>
        </g>
        
        <!-- Futuristic decorative elements -->
        <path d="M75,90 L355,90" stroke="url(#logoGradient)" strokeWidth="2" strokeDasharray="5,5" />
        
        <!-- Chart/course elements -->
        <polyline 
          points="380,60 390,50 400,65 410,45 420,55 430,40" 
          stroke="url(#logoGradient)" 
          strokeWidth="3" 
          fill="none" 
          filter="url(#neonGlow)"
        />
        
        <!-- Circle/planet element -->
        <circle cx="450" cy="50" r="15" fill="none" stroke="url(#logoGradient)" strokeWidth="2" />
        <circle cx="450" cy="50" r="10" fill="url(#logoGradient)" fillOpacity="0.3" />
        <circle cx="450" cy="50" r="5" fill="url(#logoGradient)" fillOpacity="0.5" />
      </svg>
    `;
    
    // Replace the title with the SVG logo
    try {
      headerTitle.innerHTML = '';
      headerTitle.appendChild(logoContainer);
      console.log('Logo successfully added');
    } catch (err) {
      console.error('Error replacing title with logo:', err);
    }
  } catch (err) {
    console.error('Error in replaceTitleWithLogo function:', err);
  }
};

// Function to apply cosmic elements
const applyCosmicElements = () => {
  console.log('Applying cosmic elements...');
  
  // Execute step by step with appropriate delays
  setTimeout(() => {
    replaceTitleWithLogo();
    console.log('Logo replaced');
    
    setTimeout(() => {
      transformLevelsToPlanets();
      console.log('Levels transformed into planets');
      
      setTimeout(() => {
        addRocketToPath();
        console.log('Rocket added');
      }, 800);
    }, 500);
  }, 300);
};

// Function to initialize cosmic elements (exported for use in App.js)
const initCosmicElements = () => {
  console.log('Initializing cosmic elements...');
  
  // First check if the DOM is fully loaded
  if (document.readyState === 'complete' || document.readyState === 'interactive') {
    console.log('DOM is already loaded, applying directly');
    applyCosmicElements();
  } else {
    console.log('DOM not yet loaded, waiting for DOMContentLoaded event');
    document.addEventListener('DOMContentLoaded', applyCosmicElements);
  }
  
  // Add an extra listener for React rendering after DOM load
  window.addEventListener('load', () => {
    console.log('Window load event, applying again after delay');
    setTimeout(applyCosmicElements, 1000);
  });
};

// IMPORTANT CHANGE: Create an object with all functions and export it as default
const cosmicModule = {
  TradeLingoLogo,
  initCosmicElements,
  applyCosmicElements
};

// Export the entire object as default export
export default cosmicModule;
